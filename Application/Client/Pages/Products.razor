@page "/products"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-6">
        <h3>Products</h3>
    </div>
    <div class="col-md-6">
        <div class="float-right">
            <button class="btn btn-primary mr-2"
                    @onclick="Create">
                Add
            </button>
            @if (products?.Count() > 0)
            {
                <div class="form-group d-inline-block">
                    <select class="form-control" @onchange="SetSize">
                        @foreach (var size in sizes)
                        {
                            if (this.size == size)
                            {
                                <option selected>@size</option>
                            }
                            else
                            {
                                <option>@size</option>
                            }
                        }
                    </select>
                </div>
            }
        </div>
    </div>
</div>
@if (products?.Count() > 0)
{
    <table class="table">
        <thead>
            <tr>
                @*<th scope="col">ID</th>*@
                <th scope="col">Name</th>
                <th scope="col">Price</th>
                <th scope="col">Product Type</th>
                <th scope="col">Created</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in products)
            {
                <tr>
                    @*<th scope="row">@item.ID</th>*@
                    <td>@item.Name</td>
                    <td>$@item.Price.ToString("N2")</td>
                    <td>@item.ProductType?.Name</td>
                    <td>@item.Created</td>
                    <td>
                        <span class="oi oi-pencil text-primary lead border-primary m-1 pointer"
                              @onclick="@(() => Update(item.ID))">
                        </span>
                        @*<span class="oi oi-delete text-danger lead border-danger m-1 pointer"
                              @onclick="@(async () => await Delete(item.ID))">
                        </span>*@
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="btn-toolbar float-right mt-2" role="toolbar">
        <div class="btn-group mr-2" role="group">
            <button type="button"
                    class="btn btn-sm btn-secondary"
                    @onclick="PreviousPage">
                <span class="oi oi-caret-left small"></span>
            </button>
        </div>
        <div class="btn-group mr-2" role="group">
            @foreach (var page in Enumerable.Range(1, totalPages))
            {
                if (this.page == page)
                {
                    <button type="button"
                            class="btn btn-sm btn-secondary">
                        @(page)
                    </button>
                }
                else
                {
                    <button type="button"
                            class="btn btn-sm btn-outline-secondary"
                            @onclick="@(() => SetPage(page))">
                        @(page)
                    </button>
                }
            }
        </div>
        <div class="btn-group" role="group">
            <button type="button"
                    class="btn btn-sm btn-secondary"
                    @onclick="NextPage">
                <span class="oi oi-caret-right small"></span>
            </button>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning" role="alert">
        At the moment there is no data.
    </div>
}

@code {
    #region Constants
    private readonly int[] sizes = new[] { 5, 10, 25 };
    private const int indent = 2;
    #endregion

    #region Fields
    private int size;
    private int page = 1;
    private IEnumerable<Product> products = Enumerable.Empty<Product>();
    private int totalPages = 0;
    #endregion

    public Products()
    {
        size = sizes[0];
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshItems();
        await base.OnInitializedAsync();
    }

    #region Handlers
    private async Task<double> Count()
    {
        return await Http.GetFromJsonAsync<double>($"api/{nameof(Products)}/{nameof(Count)}");
    }
    private async Task SetSize(ChangeEventArgs eventArgs)
    {
        if (int.TryParse(eventArgs.Value?.ToString(), out this.size))
        {
            await RefreshItems();
        }
    }
    private async Task SetPage(int page)
    {
        this.page = page;
        await RefreshItems();
    }
    private async Task RefreshItems()
    {
        products = await Http.GetFromJsonAsync<IEnumerable<Product>>($"api/{nameof(Products)}/{size}/{page}");
        totalPages = (int)Math.Ceiling(await Count() / size);
    }
    private async Task PreviousPage()
    {
        if (page <= 1)
        {
            return;
        }

        await SetPage(page - 1);
    }
    private async Task NextPage()
    {
        if (page >= totalPages)
        {
            return;
        }

        await SetPage(page + 1);
    }
    private async Task Delete(int id)
    {
        var response = await Http.DeleteAsync($"api/{nameof(Products)}/{id}");
        if (response.IsSuccessStatusCode)
        {
            await RefreshItems();
        }
    }
    private void Update(int id)
    {
        NavigationManager.NavigateTo($"/{nameof(Products)}/{nameof(MergeProduct)}/{id}");
    }
    private void Create()
    {
        NavigationManager.NavigateTo($"/{nameof(Products)}/{nameof(MergeProduct)}");
    }
    #endregion
}

