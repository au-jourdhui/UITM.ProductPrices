@page "/contractorPrices/{ContractorId:int}"
@inject HttpClient Http


<div class="row">
    <div class="col-md-6">
        <h3>@(contractor?.Name ?? "Default") Prices</h3>
    </div>
    <div class="col-md-6">
        <div class="float-right">
            @if (prices?.Count() > 0)
            {
                <div class="form-group d-inline-block">
                    <select class="form-control" @onchange="SetSize">
                        @foreach (var size in sizes)
                        {
                            if (this.size == size)
                            {
                                <option selected>@size</option>
                            }
                            else
                            {
                                <option>@size</option>
                            }
                        }
                    </select>
                </div>
            }
        </div>
    </div>
</div>
@if (prices?.Count() > 0)
{
    <table class="table">
        <thead>
            <tr>
                @*<th scope="col">ID</th>*@
                <th scope="col">Name</th>
                <th scope="col">Price</th>
                <th scope="col">Product Type</th>
                <th scope="col">Created</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in prices)
            {
                <tr>
                    @*<th scope="row">@item.ID</th>*@
                    <td>@item.Name</td>
                    <td>
                        @if (selected == item.ID)
                        {
                            <div class="input-group mb-3">
                                <input class="form-control"
                                       type="number"
                                       step="0.01"
                                       placeholder="Price..."
                                       @bind-value="price">
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary"
                                            type="button"
                                            @onclick="(() => selected = null)">
                                        Default
                                    </button>
                                    <button class="btn btn-outline-primary"
                                            type="button"
                                            @onclick="(() => SaveContractorPrice(item))">
                                        Save
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <span @onclick="(() => { selected = item.ID; price = item.Price; })">
                                $@item.Price.ToString("N2")
                            </span>
                        }
                    </td>
                    <td>@item.ProductType?.Name</td>
                    <td>@item.Created</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="btn-toolbar float-right" role="toolbar">
        <div class="btn-group mr-2" role="group">
            <button type="button"
                    class="btn btn-sm btn-secondary"
                    @onclick="PreviousPage">
                <span class="oi oi-caret-left small"></span>
            </button>
        </div>
        <div class="btn-group mr-2" role="group">
            @foreach (var page in Enumerable.Range(1, totalPages))
            {
                if (this.page == page)
                {
                    <button type="button"
                            class="btn btn-sm btn-secondary">
                        @(page)
                    </button>
                }
                else
                {
                    <button type="button"
                            class="btn btn-sm btn-outline-secondary"
                            @onclick="@(() => SetPage(page))">
                        @(page)
                    </button>
                }
            }
        </div>
        <div class="btn-group" role="group">
            <button type="button"
                    class="btn btn-sm btn-secondary"
                    @onclick="NextPage">
                <span class="oi oi-caret-right small"></span>
            </button>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning" role="alert">
        At the moment there is no data.
    </div>
}

@code {
    private int size;
    private int page = 1;
    private int totalPages = 0;
    private readonly int[] sizes = new[] { 5, 10, 25 };
    private int? selected = null;
    private decimal price;

    public ContractorPrices()
    {
        size = sizes[0];
    }

    [Parameter]
    public int ContractorId { get; set; }
    private IEnumerable<Product> prices = null;
    private Contractor contractor = null;

    protected override async Task OnInitializedAsync()
    {
        contractor = await Http.GetFromJsonAsync<Contractor>($"api/{nameof(Contractors)}/{ContractorId}");
        await RefreshItems();
        await base.OnInitializedAsync();
    }

    private async Task<double> Count()
    {
        return await Http.GetFromJsonAsync<double>($"api/{nameof(Products)}/{nameof(Count)}");
    }
    private async Task RefreshItems()
    {
        prices = await Http.GetFromJsonAsync<IEnumerable<Product>>($"api/ContractorProductPrices/contractor/{ContractorId}/{size}/{page}");
        totalPages = (int)Math.Ceiling(await Count() / size);
    }
    private async Task SetSize(ChangeEventArgs eventArgs)
    {
        if (int.TryParse(eventArgs.Value?.ToString(), out this.size))
        {
            await RefreshItems();
        }
    }
    private async Task SetPage(int page)
    {
        this.page = page;
        await RefreshItems();
    }
    private async Task PreviousPage()
    {
        if (page <= 1)
        {
            return;
        }

        await SetPage(page - 1);
    }
    private async Task NextPage()
    {
        if (page >= totalPages)
        {
            return;
        }

        await SetPage(page + 1);
    }
    private async Task SaveContractorPrice(Product product)
    {
        selected = null;
        var contractor = await Http.GetFromJsonAsync<Contractor>($"api/{nameof(Contractors)}/{ContractorId}");
        var productPrice = contractor.ContractorProductPrices.FirstOrDefault(x => x.Product.ID == product.ID);
        if (productPrice is null)
        {
            productPrice = new ContractorProductPrice
            {
                Contractor = new Contractor { ID = ContractorId },
                Price = price,
                Product = new Product
                {
                    ID = product.ID
                }
            };
            await Http.PostAsJsonAsync<ContractorProductPrice>($"api/ContractorProductPrices", productPrice);
        }
        else
        {
            productPrice.Price = price;
            productPrice.Contractor = new Contractor { ID = ContractorId };
            await Http.PutAsJsonAsync($"api/ContractorProductPrices/{productPrice.ID}", productPrice);
        }
        product.Price = price;
        price = 0;
    }
}
